// Generated by view binder compiler. Do not edit!
package com.humbhi.blackbox.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.humbhi.blackbox.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogConfirmBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button dialogButtonNo;

  @NonNull
  public final Button dialogButtonYes;

  @NonNull
  public final LinearLayout dialogConfirm;

  @NonNull
  public final TextView dialogMessage;

  @NonNull
  public final TextView dialogTitle;

  private DialogConfirmBinding(@NonNull LinearLayout rootView, @NonNull Button dialogButtonNo,
      @NonNull Button dialogButtonYes, @NonNull LinearLayout dialogConfirm,
      @NonNull TextView dialogMessage, @NonNull TextView dialogTitle) {
    this.rootView = rootView;
    this.dialogButtonNo = dialogButtonNo;
    this.dialogButtonYes = dialogButtonYes;
    this.dialogConfirm = dialogConfirm;
    this.dialogMessage = dialogMessage;
    this.dialogTitle = dialogTitle;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogConfirmBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogConfirmBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_confirm, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogConfirmBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.dialog_button_no;
      Button dialogButtonNo = ViewBindings.findChildViewById(rootView, id);
      if (dialogButtonNo == null) {
        break missingId;
      }

      id = R.id.dialog_button_yes;
      Button dialogButtonYes = ViewBindings.findChildViewById(rootView, id);
      if (dialogButtonYes == null) {
        break missingId;
      }

      LinearLayout dialogConfirm = (LinearLayout) rootView;

      id = R.id.dialog_message;
      TextView dialogMessage = ViewBindings.findChildViewById(rootView, id);
      if (dialogMessage == null) {
        break missingId;
      }

      id = R.id.dialog_title;
      TextView dialogTitle = ViewBindings.findChildViewById(rootView, id);
      if (dialogTitle == null) {
        break missingId;
      }

      return new DialogConfirmBinding((LinearLayout) rootView, dialogButtonNo, dialogButtonYes,
          dialogConfirm, dialogMessage, dialogTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
